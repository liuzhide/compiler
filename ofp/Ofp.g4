grammar Ofp;
program : function_decl+ EOF;
function_decl : (type|'void') ID '(' parm_decls? ')' block;
type : base_type | base_type '[' ']' | 'string' | 'bool';
base_type : 'int' | 'float' | 'char';
parm_decl : type ID;
parm_decls : parm_decl (',' parm_decl)*;
var_decl : type ID ('=' init)? ';';
integer : INT |PINT| '-' PINT;
real : REAL | PREAL| '-' REAL;
item : integer | real | CHAR;
data : '{' item (',' item)* '}'
| 'new' base_type '[' expr ']';
init : expr | data;
assign : variable (index)? '=' expr ';';
print : PRINT '(' expr ')' ';';
calstmt : cal ';';
retstmt : 'return' expr ';';
stmt : var_decl|assign|print|calstmt|retstmt|ifstmt|whilestmt;
block : '{' stmt* '}';
body : stmt|block;
ifstmt : 'if' '(' expr ')' body (elsestmt)* ('else' body)?;
elsestmt : 'else' 'if' '(' expr ')' body;
whilestmt : 'while' '(' expr ')' body;
expr : expr ( MUL|DIV ) expr | expr ( ADD|SUB ) expr | expr (LT|GT|EQ) expr|factor;
factor : unary_expr| INT| REAL| PINT| PREAL;
unary_expr : primary | SUB unary_expr;
primary : (variable|cal|'(' expr ')') (LEN|index)?|SUB PINT|SUB PREAL| CHAR|STRING|bool;
variable : ID;
cal : ID '(' (expr (',' expr)*)? ')';
bool : 'true' | 'false';
index : '[' expr ']';
PRINT : 'print'|'println';
LEN : '.length';
ADD : '+';
SUB : '-';
MUL : '*';
DIV : '/';
LT : '<';
GT : '>';
EQ : '==';
ID : [a-zA-Z]+;
PINT : [1-9][0-9]*;
INT : '0' | PINT;
PREAL : PINT '.' [0-9]+|'0' '.' '0'*[1-9][0-9]*;
REAL : INT '.' [0-9]+;
CHAR : '\'' [a-zA-Z!., ?=:()] '\'';
STRING : '"' [a-zA-Z!., ?=:()]+ '"';
COMMENT : '#' .*? '\n' ->skip;
WS : [ \t\r\n]+ ->skip;
